/* Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <35>; };

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                                 &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &kp DEL
&kp ESC    &kp Q   &kp W     &kp E     &kp R      &kp T                                  &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BSPC
&kp TAB    &kp A   &kp S     &kp D     &kp F      &kp G                                  &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X     &kp C     &kp V      &kp B   &kp K_MUTE    &rgb_ug RGB_OFF  &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                   &kp LGUI  &kp LALT  &kp LCTRL  &mo 1   &kp SPACE     &kp RET          &mo 2   &kp RCTRL  &kp RALT   &kp RGUI
            >;

            sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>, <&rgb_encoder>;
        };

        lower_layer {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4    &kp F5    &kp F6                       &kp F7     &kp F8    &kp F9    &kp F10    &kp F11   &kp F12
&kp GRAVE  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                       &kp N6     &kp N7    &kp N8    &kp N9     &kp N0    &trans
&trans     &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR  &kp PIPE
&kp UNDER  &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT  &kp SEMI  &kp COLON  &kp BSLH  &trans
                      &trans     &trans    &trans    &trans     &trans    &trans  &mo 3      &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &trans   &trans           &trans  &trans  &trans                      &trans         &trans              &trans        &trans         &trans             &trans
&trans  &kp INS  &kp PRINTSCREEN  &trans  &trans  &trans                      &kp PG_UP      &kp LC(LEFT_ARROW)  &kp UP_ARROW  &kp LC(RIGHT)  &kp LC(BACKSPACE)  &trans
&trans  &trans   &trans           &trans  &trans  &kp CAPS                    &kp PAGE_DOWN  &kp LEFT            &kp DOWN      &kp RIGHT      &kp DEL            &kp BACKSPACE
&trans  &trans   &trans           &trans  &trans  &trans    &trans    &trans  &trans         &kp HOME            &trans        &kp END        &trans             &trans
                 &trans           &trans  &trans  &mo 3     &trans    &trans  &trans         &trans              &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &trans  &rgb_ug RGB_TOG                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &trans           &trans           &trans  &trans                             &out OUT_TOG  &trans        &trans        &trans           &trans        &trans
&rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &trans           &trans           &trans  &trans                             &trans        &kp C_VOL_DN  &kp K_MUTE    &kp C_VOLUME_UP  &trans        &trans
&rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &trans           &trans           &trans  &rgb_ug RGB_TOG  &trans    &trans  &trans        &kp C_PREV    &kp C_PLAY    &kp C_NEXT       &trans        &ext_power EP_TOG
                                  &trans           &trans           &trans  &trans           &trans    &trans  &trans        &trans        &trans        &trans
            >;
        };
    };
};
